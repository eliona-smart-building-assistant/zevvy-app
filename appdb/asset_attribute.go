// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package appdb

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AssetAttribute is an object representing the database table.
type AssetAttribute struct {
	ConfigID          int32     `boil:"config_id" json:"config_id" toml:"config_id" yaml:"config_id"`
	AssetID           int32     `boil:"asset_id" json:"asset_id" toml:"asset_id" yaml:"asset_id"`
	Subtype           string    `boil:"subtype" json:"subtype" toml:"subtype" yaml:"subtype"`
	AttributeName     string    `boil:"attribute_name" json:"attribute_name" toml:"attribute_name" yaml:"attribute_name"`
	DeviceReference   string    `boil:"device_reference" json:"device_reference" toml:"device_reference" yaml:"device_reference"`
	RegisterReference string    `boil:"register_reference" json:"register_reference" toml:"register_reference" yaml:"register_reference"`
	LatestTS          time.Time `boil:"latest_ts" json:"latest_ts" toml:"latest_ts" yaml:"latest_ts"`

	R *assetAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L assetAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AssetAttributeColumns = struct {
	ConfigID          string
	AssetID           string
	Subtype           string
	AttributeName     string
	DeviceReference   string
	RegisterReference string
	LatestTS          string
}{
	ConfigID:          "config_id",
	AssetID:           "asset_id",
	Subtype:           "subtype",
	AttributeName:     "attribute_name",
	DeviceReference:   "device_reference",
	RegisterReference: "register_reference",
	LatestTS:          "latest_ts",
}

var AssetAttributeTableColumns = struct {
	ConfigID          string
	AssetID           string
	Subtype           string
	AttributeName     string
	DeviceReference   string
	RegisterReference string
	LatestTS          string
}{
	ConfigID:          "asset_attribute.config_id",
	AssetID:           "asset_attribute.asset_id",
	Subtype:           "asset_attribute.subtype",
	AttributeName:     "asset_attribute.attribute_name",
	DeviceReference:   "asset_attribute.device_reference",
	RegisterReference: "asset_attribute.register_reference",
	LatestTS:          "asset_attribute.latest_ts",
}

// Generated where

type whereHelperint32 struct{ field string }

func (w whereHelperint32) EQ(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint32) NEQ(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint32) LT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint32) LTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint32) GT(x int32) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint32) GTE(x int32) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint32) IN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint32) NIN(slice []int32) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AssetAttributeWhere = struct {
	ConfigID          whereHelperint32
	AssetID           whereHelperint32
	Subtype           whereHelperstring
	AttributeName     whereHelperstring
	DeviceReference   whereHelperstring
	RegisterReference whereHelperstring
	LatestTS          whereHelpertime_Time
}{
	ConfigID:          whereHelperint32{field: "\"zevvy\".\"asset_attribute\".\"config_id\""},
	AssetID:           whereHelperint32{field: "\"zevvy\".\"asset_attribute\".\"asset_id\""},
	Subtype:           whereHelperstring{field: "\"zevvy\".\"asset_attribute\".\"subtype\""},
	AttributeName:     whereHelperstring{field: "\"zevvy\".\"asset_attribute\".\"attribute_name\""},
	DeviceReference:   whereHelperstring{field: "\"zevvy\".\"asset_attribute\".\"device_reference\""},
	RegisterReference: whereHelperstring{field: "\"zevvy\".\"asset_attribute\".\"register_reference\""},
	LatestTS:          whereHelpertime_Time{field: "\"zevvy\".\"asset_attribute\".\"latest_ts\""},
}

// AssetAttributeRels is where relationship names are stored.
var AssetAttributeRels = struct {
}{}

// assetAttributeR is where relationships are stored.
type assetAttributeR struct {
}

// NewStruct creates a new relationship struct
func (*assetAttributeR) NewStruct() *assetAttributeR {
	return &assetAttributeR{}
}

// assetAttributeL is where Load methods for each relationship are stored.
type assetAttributeL struct{}

var (
	assetAttributeAllColumns            = []string{"config_id", "asset_id", "subtype", "attribute_name", "device_reference", "register_reference", "latest_ts"}
	assetAttributeColumnsWithoutDefault = []string{"config_id", "asset_id", "subtype", "attribute_name", "device_reference", "register_reference"}
	assetAttributeColumnsWithDefault    = []string{"latest_ts"}
	assetAttributePrimaryKeyColumns     = []string{"config_id", "asset_id", "subtype", "attribute_name"}
	assetAttributeGeneratedColumns      = []string{}
)

type (
	// AssetAttributeSlice is an alias for a slice of pointers to AssetAttribute.
	// This should almost always be used instead of []AssetAttribute.
	AssetAttributeSlice []*AssetAttribute
	// AssetAttributeHook is the signature for custom AssetAttribute hook methods
	AssetAttributeHook func(context.Context, boil.ContextExecutor, *AssetAttribute) error

	assetAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetAttributeType                 = reflect.TypeOf(&AssetAttribute{})
	assetAttributeMapping              = queries.MakeStructMapping(assetAttributeType)
	assetAttributePrimaryKeyMapping, _ = queries.BindMapping(assetAttributeType, assetAttributeMapping, assetAttributePrimaryKeyColumns)
	assetAttributeInsertCacheMut       sync.RWMutex
	assetAttributeInsertCache          = make(map[string]insertCache)
	assetAttributeUpdateCacheMut       sync.RWMutex
	assetAttributeUpdateCache          = make(map[string]updateCache)
	assetAttributeUpsertCacheMut       sync.RWMutex
	assetAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var assetAttributeAfterSelectMu sync.Mutex
var assetAttributeAfterSelectHooks []AssetAttributeHook

var assetAttributeBeforeInsertMu sync.Mutex
var assetAttributeBeforeInsertHooks []AssetAttributeHook
var assetAttributeAfterInsertMu sync.Mutex
var assetAttributeAfterInsertHooks []AssetAttributeHook

var assetAttributeBeforeUpdateMu sync.Mutex
var assetAttributeBeforeUpdateHooks []AssetAttributeHook
var assetAttributeAfterUpdateMu sync.Mutex
var assetAttributeAfterUpdateHooks []AssetAttributeHook

var assetAttributeBeforeDeleteMu sync.Mutex
var assetAttributeBeforeDeleteHooks []AssetAttributeHook
var assetAttributeAfterDeleteMu sync.Mutex
var assetAttributeAfterDeleteHooks []AssetAttributeHook

var assetAttributeBeforeUpsertMu sync.Mutex
var assetAttributeBeforeUpsertHooks []AssetAttributeHook
var assetAttributeAfterUpsertMu sync.Mutex
var assetAttributeAfterUpsertHooks []AssetAttributeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AssetAttribute) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AssetAttribute) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AssetAttribute) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AssetAttribute) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AssetAttribute) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AssetAttribute) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AssetAttribute) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AssetAttribute) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AssetAttribute) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range assetAttributeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetAttributeHook registers your hook function for all future operations.
func AddAssetAttributeHook(hookPoint boil.HookPoint, assetAttributeHook AssetAttributeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		assetAttributeAfterSelectMu.Lock()
		assetAttributeAfterSelectHooks = append(assetAttributeAfterSelectHooks, assetAttributeHook)
		assetAttributeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		assetAttributeBeforeInsertMu.Lock()
		assetAttributeBeforeInsertHooks = append(assetAttributeBeforeInsertHooks, assetAttributeHook)
		assetAttributeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		assetAttributeAfterInsertMu.Lock()
		assetAttributeAfterInsertHooks = append(assetAttributeAfterInsertHooks, assetAttributeHook)
		assetAttributeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		assetAttributeBeforeUpdateMu.Lock()
		assetAttributeBeforeUpdateHooks = append(assetAttributeBeforeUpdateHooks, assetAttributeHook)
		assetAttributeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		assetAttributeAfterUpdateMu.Lock()
		assetAttributeAfterUpdateHooks = append(assetAttributeAfterUpdateHooks, assetAttributeHook)
		assetAttributeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		assetAttributeBeforeDeleteMu.Lock()
		assetAttributeBeforeDeleteHooks = append(assetAttributeBeforeDeleteHooks, assetAttributeHook)
		assetAttributeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		assetAttributeAfterDeleteMu.Lock()
		assetAttributeAfterDeleteHooks = append(assetAttributeAfterDeleteHooks, assetAttributeHook)
		assetAttributeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		assetAttributeBeforeUpsertMu.Lock()
		assetAttributeBeforeUpsertHooks = append(assetAttributeBeforeUpsertHooks, assetAttributeHook)
		assetAttributeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		assetAttributeAfterUpsertMu.Lock()
		assetAttributeAfterUpsertHooks = append(assetAttributeAfterUpsertHooks, assetAttributeHook)
		assetAttributeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single assetAttribute record from the query using the global executor.
func (q assetAttributeQuery) OneG(ctx context.Context) (*AssetAttribute, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single assetAttribute record from the query.
func (q assetAttributeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AssetAttribute, error) {
	o := &AssetAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: failed to execute a one query for asset_attribute")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AssetAttribute records from the query using the global executor.
func (q assetAttributeQuery) AllG(ctx context.Context) (AssetAttributeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AssetAttribute records from the query.
func (q assetAttributeQuery) All(ctx context.Context, exec boil.ContextExecutor) (AssetAttributeSlice, error) {
	var o []*AssetAttribute

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "appdb: failed to assign all query results to AssetAttribute slice")
	}

	if len(assetAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AssetAttribute records in the query using the global executor
func (q assetAttributeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AssetAttribute records in the query.
func (q assetAttributeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to count asset_attribute rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q assetAttributeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q assetAttributeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "appdb: failed to check if asset_attribute exists")
	}

	return count > 0, nil
}

// AssetAttributes retrieves all the records using an executor.
func AssetAttributes(mods ...qm.QueryMod) assetAttributeQuery {
	mods = append(mods, qm.From("\"zevvy\".\"asset_attribute\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"zevvy\".\"asset_attribute\".*"})
	}

	return assetAttributeQuery{q}
}

// FindAssetAttributeG retrieves a single record by ID.
func FindAssetAttributeG(ctx context.Context, configID int32, assetID int32, subtype string, attributeName string, selectCols ...string) (*AssetAttribute, error) {
	return FindAssetAttribute(ctx, boil.GetContextDB(), configID, assetID, subtype, attributeName, selectCols...)
}

// FindAssetAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAssetAttribute(ctx context.Context, exec boil.ContextExecutor, configID int32, assetID int32, subtype string, attributeName string, selectCols ...string) (*AssetAttribute, error) {
	assetAttributeObj := &AssetAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"zevvy\".\"asset_attribute\" where \"config_id\"=$1 AND \"asset_id\"=$2 AND \"subtype\"=$3 AND \"attribute_name\"=$4", sel,
	)

	q := queries.Raw(query, configID, assetID, subtype, attributeName)

	err := q.Bind(ctx, exec, assetAttributeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "appdb: unable to select from asset_attribute")
	}

	if err = assetAttributeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return assetAttributeObj, err
	}

	return assetAttributeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AssetAttribute) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AssetAttribute) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("appdb: no asset_attribute provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	assetAttributeInsertCacheMut.RLock()
	cache, cached := assetAttributeInsertCache[key]
	assetAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			assetAttributeAllColumns,
			assetAttributeColumnsWithDefault,
			assetAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(assetAttributeType, assetAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetAttributeType, assetAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"zevvy\".\"asset_attribute\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"zevvy\".\"asset_attribute\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "appdb: unable to insert into asset_attribute")
	}

	if !cached {
		assetAttributeInsertCacheMut.Lock()
		assetAttributeInsertCache[key] = cache
		assetAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AssetAttribute record using the global executor.
// See Update for more documentation.
func (o *AssetAttribute) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AssetAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AssetAttribute) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	assetAttributeUpdateCacheMut.RLock()
	cache, cached := assetAttributeUpdateCache[key]
	assetAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			assetAttributeAllColumns,
			assetAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("appdb: unable to update asset_attribute, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"zevvy\".\"asset_attribute\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assetAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetAttributeType, assetAttributeMapping, append(wl, assetAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update asset_attribute row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by update for asset_attribute")
	}

	if !cached {
		assetAttributeUpdateCacheMut.Lock()
		assetAttributeUpdateCache[key] = cache
		assetAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q assetAttributeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q assetAttributeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all for asset_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected for asset_attribute")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AssetAttributeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetAttributeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("appdb: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"zevvy\".\"asset_attribute\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, assetAttributePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to update all in assetAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to retrieve rows affected all in update all assetAttribute")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AssetAttribute) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AssetAttribute) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("appdb: no asset_attribute provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetAttributeUpsertCacheMut.RLock()
	cache, cached := assetAttributeUpsertCache[key]
	assetAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			assetAttributeAllColumns,
			assetAttributeColumnsWithDefault,
			assetAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			assetAttributeAllColumns,
			assetAttributePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("appdb: unable to upsert asset_attribute, could not build update column list")
		}

		ret := strmangle.SetComplement(assetAttributeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(assetAttributePrimaryKeyColumns) == 0 {
				return errors.New("appdb: unable to upsert asset_attribute, could not build conflict column list")
			}

			conflict = make([]string, len(assetAttributePrimaryKeyColumns))
			copy(conflict, assetAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"zevvy\".\"asset_attribute\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(assetAttributeType, assetAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetAttributeType, assetAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "appdb: unable to upsert asset_attribute")
	}

	if !cached {
		assetAttributeUpsertCacheMut.Lock()
		assetAttributeUpsertCache[key] = cache
		assetAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AssetAttribute record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AssetAttribute) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AssetAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AssetAttribute) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("appdb: no AssetAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"zevvy\".\"asset_attribute\" WHERE \"config_id\"=$1 AND \"asset_id\"=$2 AND \"subtype\"=$3 AND \"attribute_name\"=$4"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete from asset_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by delete for asset_attribute")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q assetAttributeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q assetAttributeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("appdb: no assetAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from asset_attribute")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for asset_attribute")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AssetAttributeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetAttributeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(assetAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"zevvy\".\"asset_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetAttributePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "appdb: unable to delete all from assetAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "appdb: failed to get rows affected by deleteall for asset_attribute")
	}

	if len(assetAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AssetAttribute) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: no AssetAttribute provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AssetAttribute) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAssetAttribute(ctx, exec, o.ConfigID, o.AssetID, o.Subtype, o.AttributeName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetAttributeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("appdb: empty AssetAttributeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetAttributeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AssetAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"zevvy\".\"asset_attribute\".* FROM \"zevvy\".\"asset_attribute\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, assetAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "appdb: unable to reload all in AssetAttributeSlice")
	}

	*o = slice

	return nil
}

// AssetAttributeExistsG checks if the AssetAttribute row exists.
func AssetAttributeExistsG(ctx context.Context, configID int32, assetID int32, subtype string, attributeName string) (bool, error) {
	return AssetAttributeExists(ctx, boil.GetContextDB(), configID, assetID, subtype, attributeName)
}

// AssetAttributeExists checks if the AssetAttribute row exists.
func AssetAttributeExists(ctx context.Context, exec boil.ContextExecutor, configID int32, assetID int32, subtype string, attributeName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"zevvy\".\"asset_attribute\" where \"config_id\"=$1 AND \"asset_id\"=$2 AND \"subtype\"=$3 AND \"attribute_name\"=$4 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, configID, assetID, subtype, attributeName)
	}
	row := exec.QueryRowContext(ctx, sql, configID, assetID, subtype, attributeName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "appdb: unable to check if asset_attribute exists")
	}

	return exists, nil
}

// Exists checks if the AssetAttribute row exists.
func (o *AssetAttribute) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AssetAttributeExists(ctx, exec, o.ConfigID, o.AssetID, o.Subtype, o.AttributeName)
}
