/*
 * App template API
 *
 * API to access and configure the app template
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apiserver

import (
	"encoding/json"
	"errors"
	"io"
	"net/http"
	"strings"
)

// AssetAttributeAPIController binds http requests to an api service and writes the service results to the http response
type AssetAttributeAPIController struct {
	service      AssetAttributeAPIServicer
	errorHandler ErrorHandler
}

// AssetAttributeAPIOption for how the controller is set up.
type AssetAttributeAPIOption func(*AssetAttributeAPIController)

// WithAssetAttributeAPIErrorHandler inject ErrorHandler into controller
func WithAssetAttributeAPIErrorHandler(h ErrorHandler) AssetAttributeAPIOption {
	return func(c *AssetAttributeAPIController) {
		c.errorHandler = h
	}
}

// NewAssetAttributeAPIController creates a default api controller
func NewAssetAttributeAPIController(s AssetAttributeAPIServicer, opts ...AssetAttributeAPIOption) Router {
	controller := &AssetAttributeAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AssetAttributeAPIController
func (c *AssetAttributeAPIController) Routes() Routes {
	return Routes{
		"DeleteAssetAttributes": Route{
			strings.ToUpper("Delete"),
			"/v1/asset-attributes",
			c.DeleteAssetAttributes,
		},
		"GetAssetAttributes": Route{
			strings.ToUpper("Get"),
			"/v1/asset-attributes",
			c.GetAssetAttributes,
		},
		"PutAssetAttribute": Route{
			strings.ToUpper("Put"),
			"/v1/asset-attributes",
			c.PutAssetAttribute,
		},
	}
}

// DeleteAssetAttributes - Deletes configured asset attributes
func (c *AssetAttributeAPIController) DeleteAssetAttributes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var configIdParam int32
	if query.Has("configId") {
		param, err := parseNumericParameter[int32](
			query.Get("configId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		configIdParam = param
	} else {
	}
	var assetIdParam int32
	if query.Has("assetId") {
		param, err := parseNumericParameter[int32](
			query.Get("assetId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		assetIdParam = param
	} else {
	}
	var subtypeParam string
	if query.Has("subtype") {
		param := query.Get("subtype")

		subtypeParam = param
	} else {
	}
	var attributeNameParam string
	if query.Has("attributeName") {
		param := query.Get("attributeName")

		attributeNameParam = param
	} else {
	}
	result, err := c.service.DeleteAssetAttributes(r.Context(), configIdParam, assetIdParam, subtypeParam, attributeNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAssetAttributes - Get configured asset attributes
func (c *AssetAttributeAPIController) GetAssetAttributes(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var configIdParam int32
	if query.Has("configId") {
		param, err := parseNumericParameter[int32](
			query.Get("configId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		configIdParam = param
	} else {
	}
	var assetIdParam int32
	if query.Has("assetId") {
		param, err := parseNumericParameter[int32](
			query.Get("assetId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		assetIdParam = param
	} else {
	}
	var subtypeParam string
	if query.Has("subtype") {
		param := query.Get("subtype")

		subtypeParam = param
	} else {
	}
	var attributeNameParam string
	if query.Has("attributeName") {
		param := query.Get("attributeName")

		attributeNameParam = param
	} else {
	}
	result, err := c.service.GetAssetAttributes(r.Context(), configIdParam, assetIdParam, subtypeParam, attributeNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutAssetAttribute - Creates or updates a configured asset attribute
func (c *AssetAttributeAPIController) PutAssetAttribute(w http.ResponseWriter, r *http.Request) {
	assetAttributeParam := AssetAttribute{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&assetAttributeParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAssetAttributeRequired(assetAttributeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAssetAttributeConstraints(assetAttributeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutAssetAttribute(r.Context(), assetAttributeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
